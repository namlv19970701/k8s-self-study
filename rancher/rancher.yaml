---
# Source: rancher/templates/priorityClass.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: rancher-critical
  namespace: cattle-system
  labels: 
    app: rancher
    chart: rancher-2.9.3
    heritage: Helm
    release: rancher
value: 1000000000
globalDefault: false
description: "Priority class used by pods critical to rancher's functionality."
---
# Source: rancher/templates/serviceAccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: rancher
  namespace: cattle-system
  labels:
    app: rancher
    chart: rancher-2.9.3
    heritage: Helm
    release: rancher
---
# Source: rancher/templates/configMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: rancher-config
  namespace: cattle-system
  labels: 
    app: rancher
    chart: rancher-2.9.3
    heritage: Helm
    release: rancher
    app.kubernetes.io/part-of: "rancher"
data:
  priorityClassName:  rancher-critical
---
# Source: rancher/templates/clusterRoleBinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rancher
  namespace: cattle-system
  labels:
    app: rancher
    chart: rancher-2.9.3
    heritage: Helm
    release: rancher
subjects:
- kind: ServiceAccount
  name: rancher
  namespace: cattle-system
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: rancher/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: rancher
  namespace: cattle-system
  labels:
    app: rancher
    chart: rancher-2.9.3
    heritage: Helm
    release: rancher
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 444
    protocol: TCP
    name: https-internal
  selector:
    app: rancher
---
# Source: rancher/templates/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: rancher
  namespace: cattle-system
  annotations:
  labels:
    app: rancher
    chart: rancher-2.9.3
    heritage: Helm
    release: rancher
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rancher
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: rancher
        release: rancher
    spec:
      priorityClassName: rancher-critical
      serviceAccountName: rancher
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - rancher
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms: 
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: NotIn
                  values:
                  - windows
      tolerations: 
        - key: "cattle.io/os"
          value: "linux"
          effect: "NoSchedule"
          operator: "Equal"
      containers:
      - image: rancher/rancher:v2.9.3
        imagePullPolicy: IfNotPresent
        name: rancher
        ports:
        - containerPort: 80
          protocol: TCP
        args:
        # Public trusted CA - clear ca certs
        - "--no-cacerts"
        - "--http-listen-port=80"
        - "--https-listen-port=443"
        - "--add-local=true"
        env:
        - name: CATTLE_NAMESPACE
          value: cattle-system
        - name: CATTLE_PEER_SERVICE
          value: rancher
        startupProbe:
          httpGet:
            path: /healthz
            port: 80
          timeoutSeconds: 5
          failureThreshold: 12
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 80
          timeoutSeconds: 5
          periodSeconds: 30
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
          timeoutSeconds: 5
          periodSeconds: 30
          failureThreshold: 5
        resources:
          {}
        volumeMounts:
      volumes:
---
# Source: rancher/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rancher
  namespace: cattle-system
  labels:
    app: rancher
    chart: rancher-2.9.3
    heritage: Helm
    release: rancher
  annotations:
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
spec:
  rules:
  - host: rancher.levietnam.local  # hostname to access rancher server
    http:
      paths:
      - backend:
          service:
            name: rancher
            port:
              number: 80
        pathType: ImplementationSpecific
        path: /
  tls:
  - hosts:
    - rancher.levietnam.local
    secretName: ingress-rancher-tls
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: ingress-rancher-tls-issuer
  namespace: cattle-system
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers:
    - http01:
        ingress:
          class: nginx
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ingress-rancher-tls-cert
  namespace: cattle-system
spec:
  secretName: ingress-rancher-tls # Name of the Secret where the certificate will be stored
  issuerRef:
    name: ingress-rancher-tls-issuer  # The Issuer that will issue the certificate
    kind: Issuer
  commonName: rancher.levietnam.local
